# Reading STL files 
import zipfile
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import struct

filename = "file_path.zip"

def read_binary_stl_from_zip(zip_filename, stl_filename):
    with zipfile.ZipFile(zip_filename, 'r') as zip_file:
        # Print the list of files in the zip archive
        file_list = zip_file.namelist()
        print(file_list)

        # Check if the specified STL file is in the archive
        if stl_filename not in file_list:
            raise KeyError(f"There is no item named '{stl_filename}' in the archive.")
        
        with zip_file.open(stl_filename) as file:
            # Read the entire binary data
            data = file.read()

        # Check if the STL file is in binary format
        if not is_binary_stl(data):
            raise ValueError("The STL file is not in binary format.")
                        
        # Extract vertex information
        vertex_count = struct.unpack('<I', data[80:84])[0]
        vertex_start = 84

        # Read points
        x, y, z = [], [], []
        for i in range(vertex_count):
            vertex_data = struct.unpack('<fff', data[vertex_start + i * 12: vertex_start + (i + 1) * 12])
            x.append(vertex_data[0])
            y.append(vertex_data[1])
            z.append(vertex_data[2])

        # Ensure the number of vertices is a multiple of 3
        while len(x) % 3 != 0:
            x.append(0)
            y.append(0)
            z.append(0)

        # Combine x, y, and z into a single numpy array
        xyz = np.column_stack((x, y, z))

        # Check if xyz is empty
        if not xyz.any():
            raise ValueError("No vertex information found in the STL file.")

        # Get only unique points
        unique_xyz, indices = np.unique(xyz, axis=0, return_index=True)

        # Check if unique_xyz is empty
        if not unique_xyz.any():
            raise ValueError("No unique vertex information found in the STL file.")

        # Extract triangles
        trian = np.arange(len(unique_xyz)).reshape(-1, 3)

    return unique_xyz, trian

def is_binary_stl(data):
    # Check if the file starts with 'solid', which indicates an ASCII STL file
    return data[0:5] != b'solid'

# Provide the STL filename within the zip file
stl_filename_inside_zip = "file.stl"

# Read STL file from the zip file
xyz, trian = read_binary_stl_from_zip(filename, stl_filename_inside_zip)

# Print dimensions for debugging
print("xyz shape:", xyz.shape)
print("trian shape:", trian.shape)

# Check for unique vertices
unique_vertices, unique_indices = np.unique(xyz, axis=0, return_index=True)
print("unique_vertices shape:", unique_vertices.shape)

# Check if any triangles reference non-existent vertices
invalid_triangles = np.any(trian >= len(unique_vertices), axis=1)
if np.any(invalid_triangles):
    print("Invalid triangles found!")
    print("Invalid triangles indices:", np.where(invalid_triangles)[0])


# Plot the 3D model
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_trisurf(xyz[:, 0], xyz[:, 1], xyz[:, 2], triangles=trian, cmap='viridis')

# Customize the plot (optional)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Model from STL')

# Show the plot
plt.show()
